import React, { useState } from "react";
import { useQuery, useMutation } from "@tanstack/react-query";
import { useLocation, useParams } from "wouter";
import { queryClient } from "@/lib/queryClient";

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ URL
type AIAgentParams = {
  id?: string;
};
import { 
  Card, 
  CardContent, 
  CardHeader, 
  CardTitle, 
  CardDescription,
  CardFooter
} from "@/components/ui/card";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Switch } from "@/components/ui/switch";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { 
  Bot, 
  Brain, 
  Server, 
  RefreshCw, 
  Plus, 
  Edit, 
  CheckCircle, 
  XCircle, 
  Play,
  BookOpen,
  MessageSquare,
  FileStack,
  LayoutDashboard,
  FileCheck,
  Zap,
  FlaskConical,
  Sparkles,
  RotateCw,
  SearchCode,
  UserCog,
  Globe,
  ScrollText,
  Stethoscope,
  Briefcase,
  Camera,
  GraduationCap,
  Flame,
  BarChart2,
  Truck,
  Database
} from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
type Ministry = {
  id: number;
  name: string;
  shortName?: string;
  description?: string;
  icon?: string;
};

type AgentType = {
  id: number;
  name: string;
  category: string;
  description?: string;
  icon?: string;
};

type Agent = {
  id: number;
  name: string;
  type: string;
  description?: string;
  ministryId?: number;
  ministry?: Ministry;
  typeId?: number;
  agentType?: AgentType;
  modelId: number;
  isActive: boolean;
  systemPrompt: string;
  config: any;
  stats?: any;
  tasks?: Task[];
  totalTasks?: number;
  completedTasks?: number;
};

type Integration = {
  id: number;
  name: string;
  type: string;
  apiUrl: string;
  apiKey?: string;
  isActive: boolean;
  config: any;
};

type Task = {
  id: number;
  title: string;
  description: string;
  status: string;
  assignedTo?: number;
  agentId?: number;
};

const AIAgentsPage = () => {
  const { toast } = useToast();
  const params = useParams<AIAgentParams>();
  const agentId = params && params.id ? parseInt(params.id) : null;
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
  const [showAgentDialog, setShowAgentDialog] = useState(false);
  const [showTaskDialog, setShowTaskDialog] = useState(false);
  const [showPromptDialog, setShowPromptDialog] = useState(false);
  const [showPersonaBuilderDialog, setShowPersonaBuilderDialog] = useState(false);
  const [editingAgent, setEditingAgent] = useState<Agent | null>(null);
  const [viewingAgent, setViewingAgent] = useState<Agent | null>(null);
  const [assigningTask, setAssigningTask] = useState<Task | null>(null);
  const [editingSystemPrompt, setEditingSystemPrompt] = useState<string>("");
  
  // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞ –≤ PersonaBuilder
  interface KnowledgeSource {
    id: string;
    type: 'pinecone' | 'google_drive' | 'postgresql' | 'file';
    name: string;
    config: Record<string, any>;
  }
  
  interface AgentTrigger {
    id: string;
    type: 'event' | 'data' | 'cron';
    name: string;
    config: Record<string, any>;
  }
  
  interface PersonaBuilderConfig {
    name: string;
    model: string;
    prompt: string;
    knowledge_sources: KnowledgeSource[];
    triggers: AgentTrigger[];
    roles: ('public' | 'internal' | 'admin')[];
  }
  
  const [personaConfig, setPersonaConfig] = useState<PersonaBuilderConfig>({
    name: '',
    model: 'gpt-4o',
    prompt: '',
    knowledge_sources: [],
    triggers: [],
    roles: ['internal']
  });
  
  // –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤
  const demoMinistries: Ministry[] = [
    {
      id: 1,
      name: "–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ —é—Å—Ç–∏—Ü–∏–∏",
      shortName: "–ú–∏–Ω—é—Å—Ç",
      description: "–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ —é—Å—Ç–∏—Ü–∏–∏ –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω",
      icon: "‚öñÔ∏è"
    },
    {
      id: 2,
      name: "–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏ –Ω–∞—É–∫–∏",
      shortName: "–ú–û–ù",
      description: "–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏ –Ω–∞—É–∫–∏ –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω",
      icon: "üìö"
    },
    {
      id: 3,
      name: "–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ —Ç—Ä—É–¥–∞ –∏ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞—â–∏—Ç—ã",
      shortName: "–ú–∏–Ω—Ç—Ä—É–¥",
      description: "–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ —Ç—Ä—É–¥–∞ –∏ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞—â–∏—Ç—ã –Ω–∞—Å–µ–ª–µ–Ω–∏—è –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω",
      icon: "üßë‚Äçü¶Ω"
    },
    {
      id: 4,
      name: "–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞",
      shortName: "–ú–∏–Ω—Ç—Ä–∞–Ω—Å",
      description: "–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω",
      icon: "üöÜ"
    },
    {
      id: 5,
      name: "–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –¥–µ–ª",
      shortName: "–ú–í–î",
      description: "–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –¥–µ–ª –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω",
      icon: "üöì"
    },
    {
      id: 6,
      name: "–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏",
      shortName: "–ú–∏–Ω—ç–Ω–µ—Ä–≥–æ",
      description: "–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏ –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω",
      icon: "üõ¢"
    },
    {
      id: 7,
      name: "–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞",
      shortName: "–ú–∏–Ω–ü—Ä–æ–º",
      description: "–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω",
      icon: "üèó"
    },
    {
      id: 8,
      name: "–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏",
      shortName: "–ú–∏–Ω–¢–æ—Ä–≥",
      description: "–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω",
      icon: "üõç"
    },
    {
      id: 9,
      name: "–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ —Å–µ–ª—å—Å–∫–æ–≥–æ —Ö–æ–∑—è–π—Å—Ç–≤–∞",
      shortName: "–ú–∏–Ω—Å–µ–ª—å—Ö–æ–∑",
      description: "–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ —Å–µ–ª—å—Å–∫–æ–≥–æ —Ö–æ–∑—è–π—Å—Ç–≤–∞ –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω",
      icon: "üåæ"
    },
    {
      id: 10,
      name: "–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö –¥–µ–ª",
      shortName: "–ú–ò–î",
      description: "–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö –¥–µ–ª –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω",
      icon: "üåê"
    },
    {
      id: 11,
      name: "–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è",
      shortName: "–ú–∏–Ω–∑–¥—Ä–∞–≤",
      description: "–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω",
      icon: "üè•"
    }
  ];

  // –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∏–ø–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤
  const demoAgentTypes: AgentType[] = [
    {
      id: 1,
      name: "–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –ø—Ä–∞–≤–æ–≤—ã–º –≤–æ–ø—Ä–æ—Å–∞–º",
      category: "legal_consultant",
      description: "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π –≥—Ä–∞–∂–¥–∞–Ω –ø–æ –ø—Ä–∞–≤–æ–≤—ã–º –≤–æ–ø—Ä–æ—Å–∞–º"
    },
    {
      id: 2,
      name: "–ò–ò –≤ –∑–∞–∫–æ–Ω–æ—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–µ",
      category: "legislation_assistant",
      description: "–ê–Ω–∞–ª–∏–∑ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ-–ø—Ä–∞–≤–æ–≤—ã—Ö –∞–∫—Ç–æ–≤ –∏ –≤—ã—è–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫"
    },
    {
      id: 3,
      name: "–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –ï–ù–¢",
      category: "education_consultant",
      description: "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –∏ –ï–ù–¢"
    },
    {
      id: 4,
      name: "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∫–∞–∑–∞—Ö—Å–∫–æ–π –≥—Ä–∞–º–º–∞—Ç–∏–∫–µ",
      category: "language_assistant",
      description: "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤ –Ω–∞ –∫–∞–∑–∞—Ö—Å–∫–æ–º —è–∑—ã–∫–µ"
    },
    {
      id: 5,
      name: "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏",
      category: "disability_verification",
      description: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º"
    },
    {
      id: 6,
      name: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä—É–¥–æ–≤—ã–º–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏",
      category: "hr_management",
      description: "–ü—Ä–æ–≥–Ω–æ–∑ –∫–∞–¥—Ä–æ–≤—ã—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –∏ –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ —Ç—Ä—É–¥–∞"
    },
    {
      id: 7,
      name: "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç",
      category: "transport_consultant",
      description: "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –∏ –ø–µ—Ä–µ–≤–æ–∑–æ–∫"
    },
    {
      id: 8,
      name: "–ñ–î-–∞–Ω–∞–ª–∏–∑ (Pangu)",
      category: "railway_analysis",
      description: "–ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∂–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã"
    },
    {
      id: 9,
      name: "–í–∏–¥–µ–æ–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥",
      category: "video_monitoring",
      description: "–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ª–∏—Ü –∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π"
    },
    {
      id: 10,
      name: "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ '“ö–æ—Ä“ì–∞—É'",
      category: "traffic_rules",
      description: "–í—ã—è–≤–ª–µ–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π –ü–î–î"
    }
  ];  
  
  // –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤
  const demoAgents: Agent[] = [
    {
      id: 1,
      name: "–õ–µ–≥–∞–ª–ê–¥–≤–∞–π–∑–µ—Ä",
      type: "legal",
      ministryId: 1,
      typeId: 1,
      description: "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π –≥—Ä–∞–∂–¥–∞–Ω –ø–æ –ø—Ä–∞–≤–æ–≤—ã–º –≤–æ–ø—Ä–æ—Å–∞–º",
      modelId: 1,
      isActive: true,
      systemPrompt: "–í—ã - –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø—Ä–∞–≤–æ–≤—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–∞ —é—Å—Ç–∏—Ü–∏–∏. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è, —É—Ä–æ–≤–µ–Ω—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º –†–ö.",
      config: { temperature: 0.3, max_tokens: 1000 },
      stats: { 
        processedRequests: 100000, 
        avgResponseTime: "4.3 —á–∞—Å–∞",
        satisfactionRate: 92
      },
      totalTasks: 127,
      completedTasks: 119
    },
    {
      id: 2,
      name: "–ù–æ—Ä–º–æ—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ–ê–ò",
      type: "legal",
      ministryId: 1,
      typeId: 2,
      description: "–ê–Ω–∞–ª–∏–∑ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ-–ø—Ä–∞–≤–æ–≤—ã—Ö –∞–∫—Ç–æ–≤ –∏ –≤—ã—è–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫",
      modelId: 1,
      isActive: true,
      systemPrompt: "–í—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–º—É –∞–Ω–∞–ª–∏–∑—É. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ-–ø—Ä–∞–≤–æ–≤—ã–µ –∞–∫—Ç—ã, –≤—ã—è–≤–ª—è—Ç—å –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —É–ª—É—á—à–µ–Ω–∏—è.",
      config: { temperature: 0.2, max_tokens: 2000 },
      stats: { 
        processedDocuments: 6000, 
        errorsFound: 347,
        timeReduction: "87%"
      },
      totalTasks: 52,
      completedTasks: 48
    },
    {
      id: 3,
      name: "–ï–ù–¢-–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç",
      type: "education",
      ministryId: 2,
      typeId: 3,
      description: "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –ï–ù–¢ –∏ –ø—Ä–∞–≤–∏–ª–∞–º –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è",
      modelId: 1,
      isActive: true,
      systemPrompt: "–í—ã - –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –ï–ù–¢ –∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –≤—É–∑—ã –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —Ç–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∞–≤–∏–ª–∞—Ö, —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö –∏ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞—Ö.",
      config: { temperature: 0.1, max_tokens: 1500 },
      stats: { 
        consultationsProvided: 49876, 
        satisfactionRate: 94,
        responseTime: "2.1 –º–∏–Ω"
      },
      totalTasks: 208,
      completedTasks: 195
    },
    {
      id: 4,
      name: "“ö–∞–∑–∞“õ —Ç—ñ–ª—ñ –∫”©–º–µ–∫—à—ñ—Å—ñ",
      type: "education",
      ministryId: 2,
      typeId: 4,
      description: "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤ –Ω–∞ –∫–∞–∑–∞—Ö—Å–∫–æ–º —è–∑—ã–∫–µ",
      modelId: 1,
      isActive: true,
      systemPrompt: "–í—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–∞–∑–∞—Ö—Å–∫–æ–º—É —è–∑—ã–∫—É. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –ø—Ä–æ–≤–µ—Ä—è—Ç—å –≥—Ä–∞–º–º–∞—Ç–∏–∫—É, –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—é –∏ —Å—Ç–∏–ª–∏—Å—Ç–∏–∫—É —Ç–µ–∫—Å—Ç–æ–≤ –Ω–∞ –∫–∞–∑–∞—Ö—Å–∫–æ–º —è–∑—ã–∫–µ, –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
      config: { temperature: 0.3, max_tokens: 1000 },
      stats: { 
        textsAnalyzed: 25000, 
        averageErrors: 12.7,
        satisfactionRate: 91
      },
      totalTasks: 77,
      completedTasks: 74
    },
    {
      id: 5,
      name: "–ú–µ–¥–≠–∫—Å–ø–µ—Ä—Ç",
      type: "medical",
      ministryId: 11,
      typeId: 5,
      description: "–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–∏–∞–≥–Ω–æ–∑–æ–≤",
      modelId: 1,
      isActive: true,
      systemPrompt: "–í—ã - –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π —ç–∫—Å–ø–µ—Ä—Ç. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã, –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–≥–Ω–æ–∑—ã –∏ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ª–µ—á–µ–Ω–∏—è.",
      config: { temperature: 0.1, max_tokens: 1500 },
      stats: { 
        documentsProcessed: 32467, 
        accuracyRate: 96.8,
        processingTime: "3.2 –º–∏–Ω"
      },
      totalTasks: 142,
      completedTasks: 139
    },
    {
      id: 6,
      name: "–¢—Ä—É–¥–≠–∫—Å–ø–µ—Ä—Ç",
      type: "labor",
      ministryId: 3,
      typeId: 6,
      description: "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ —Ç—Ä—É–¥–æ–≤–æ–º—É –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É –∏ –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ —Ç—Ä—É–¥–∞",
      modelId: 3,
      isActive: true,
      systemPrompt: "–í—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç—Ä—É–¥–æ–≤–æ–º—É –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫ —Ä—ã–Ω–∫–∞ —Ç—Ä—É–¥–∞. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ç—Ä—É–¥–æ–≤—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ —Ä—ã–Ω–∫–∞ —Ç—Ä—É–¥–∞.",
      config: { temperature: 0.2, max_tokens: 2000 },
      stats: { 
        consultationsProvided: 28754, 
        satisfactionRate: 89.5,
        reportsGenerated: 187
      },
      totalTasks: 124,
      completedTasks: 118
    },
    {
      id: 7,
      name: "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–ê–Ω–∞–ª–∏—Ç–∏–∫",
      type: "transport",
      ministryId: 4,
      typeId: 7,
      description: "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤",
      modelId: 1,
      isActive: true,
      systemPrompt: "–í—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ –ø–æ—Ç–æ–∫–∏, –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã.",
      config: { temperature: 0.2, max_tokens: 1500 },
      stats: { 
        routesOptimized: 1254, 
        fuelSavings: "18.7%",
        congestionReduction: "23.5%"
      },
      totalTasks: 76,
      completedTasks: 72
    },
    {
      id: 8,
      name: "–°—É–±—Å–∏–¥–∏—è–ó–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å",
      type: "agriculture",
      ministryId: 9,
      typeId: 8,
      description: "–ü–æ–º–æ—â–Ω–∏–∫ –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –∑–∞—è–≤–æ–∫ –Ω–∞ —Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—É–±—Å–∏–¥–∏–∏",
      modelId: 1,
      isActive: true,
      systemPrompt: "–í—ã - —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã–º —Å—É–±—Å–∏–¥–∏—è–º. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –ø–æ–º–æ–≥–∞—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—É–±—Å–∏–¥–∏–π, –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",
      config: { temperature: 0.2, max_tokens: 1500 },
      stats: { 
        applicationsProcessed: 8754, 
        errorReduction: "76%",
        processingTime: "15 –º–∏–Ω"
      },
      totalTasks: 94,
      completedTasks: 89
    },
    {
      id: 9,
      name: "–ö–∞–º–µ—Ä–∞–ê–ò",
      type: "mvd",
      ministryId: 5,
      typeId: 9,
      description: "–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ª–∏—Ü –∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π –ø—Ä–∞–≤–æ–ø–æ—Ä—è–¥–∫–∞",
      modelId: 2,
      isActive: true,
      systemPrompt: "–í—ã - —Å–∏—Å—Ç–µ–º–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –ø—Ä–∞–≤–æ–ø–æ—Ä—è–¥–∫–∞. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫ —Å –∫–∞–º–µ—Ä –Ω–∞–±–ª—é–¥–µ–Ω–∏—è, —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –ª–∏—Ü–∞ –∏ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ.",
      config: { temperature: 0.1, max_tokens: 1000 },
      stats: { 
        camerasConnected: 4578, 
        eventsDetected: 62451,
        responseTime: "1.2 —Å–µ–∫"
      },
      totalTasks: 104,
      completedTasks: 102
    },
    {
      id: 10,
      name: "–ü–î–î–ú–æ–Ω–∏—Ç–æ—Ä",
      type: "mvd",
      ministryId: 5,
      typeId: 10,
      description: "–í—ã—è–≤–ª–µ–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π –ü–î–î –ø–æ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ",
      modelId: 2,
      isActive: true,
      systemPrompt: "–í—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –¥–æ—Ä–æ–∂–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏–π –ü–î–î –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —à—Ç—Ä–∞—Ñ–Ω—ã—Ö —Å–∞–Ω–∫—Ü–∏–π.",
      config: { temperature: 0.2, max_tokens: 1500 },
      stats: { 
        violationsDetected: 214792, 
        processingTime: "4.7 —Å–µ–∫",
        accuracyRate: 98.2
      },
      totalTasks: 352,
      completedTasks: 349
    },
    {
      id: 11,
      name: "–û–±—Ä–∞—â–µ–Ω–∏—è–¢—Ä–µ–∫–µ—Ä",
      type: "citizen_requests",
      description: "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π –≥—Ä–∞–∂–¥–∞–Ω",
      modelId: 1,
      isActive: true,
      systemPrompt: "–í—ã - —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π –≥—Ä–∞–∂–¥–∞–Ω. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è, –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å –∏—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≤–µ–¥–æ–º—Å—Ç–≤–∞ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ç–∏–ø–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã.",
      config: { temperature: 0.2, max_tokens: 2500 },
      stats: { 
        requestsProcessed: 145692, 
        averageProcessingTime: "1.8 –º–∏–Ω",
        automaticResponseRate: 78.3
      },
      totalTasks: 523,
      completedTasks: 512
    },
    {
      id: 12,
      name: "–ë–ª–æ–∫—á–µ–π–Ω–†–µ–∫–æ—Ä–¥–µ—Ä",
      type: "blockchain",
      description: "–ê–≥–µ–Ω—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –±–ª–æ–∫—á–µ–π–Ω–µ",
      modelId: 4,
      isActive: true,
      systemPrompt: "–í—ã - –∞–≥–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–ª–æ–∫—á–µ–π–Ω–æ–º Hyperledger Besu. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –∑–∞–ø–∏—Å—å –≤–∞–∂–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –±–ª–æ–∫—á–µ–π–Ω, –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –Ω–µ–∏–∑–º–µ–Ω–Ω–æ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
      config: { 
        chainId: "besu-gov", 
        nodeEndpoint: "https://besu-node.gov.kz" 
      },
      stats: { 
        transactionsRecorded: 38945, 
        verificationSuccessRate: 100,
        averageConfirmationTime: "4.2 —Å–µ–∫"
      },
      totalTasks: 187,
      completedTasks: 187
    },
    {
      id: 13,
      name: "–≠–Ω–µ—Ä–≥–æ–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
      type: "energy",
      ministryId: 6,
      description: "–ê–Ω–∞–ª–∏–∑ —ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–¥–∞–Ω–∏–π –∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã",
      modelId: 3,
      isActive: true,
      systemPrompt: "–í—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏, –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –º–µ—Ä—ã –ø–æ –ø–æ–≤—ã—à–µ–Ω–∏—é —ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç –æ—Ç –≤–Ω–µ–¥—Ä–µ–Ω–∏—è —ç—Ç–∏—Ö –º–µ—Ä.",
      config: { temperature: 0.2, max_tokens: 2000 },
      stats: { 
        buildingsAnalyzed: 3456, 
        energySavings: "24.7%",
        recommendationsImplemented: 1872
      },
      totalTasks: 98,
      completedTasks: 92
    },
    {
      id: 14,
      name: "–¢–æ—Ä–≥–æ–≤—ã–π–ê–Ω–∞–ª–∏—Å—Ç",
      type: "trade",
      ministryId: 8,
      description: "–ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–æ–æ–±–æ—Ä–æ—Ç–∞ –∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π",
      modelId: 3,
      isActive: true,
      systemPrompt: "–í—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç–æ—Ä–≥–æ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–æ–æ–±–æ—Ä–æ—Ç–µ, –≤—ã—è–≤–ª—è—Ç—å —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π –∏ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –º–µ—Ä—ã –ø–æ –∏—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.",
      config: { temperature: 0.2, max_tokens: 2000 },
      stats: { 
        reportsGenerated: 245, 
        dataProcessed: "17.8 –¢–ë",
        insightsIdentified: 879
      },
      totalTasks: 62,
      completedTasks: 59
    },
    {
      id: 15,
      name: "–ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω—ã–π–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫",
      type: "translator",
      description: "–ü–µ—Ä–µ–≤–æ–¥ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –º–µ–∂–¥—É –∫–∞–∑–∞—Ö—Å–∫–∏–º, —Ä—É—Å—Å–∫–∏–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–º —è–∑—ã–∫–∞–º–∏",
      modelId: 1,
      isActive: true,
      systemPrompt: "–í—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –º–µ–∂–¥—É –∫–∞–∑–∞—Ö—Å–∫–∏–º, —Ä—É—Å—Å–∫–∏–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–º —è–∑—ã–∫–∞–º–∏. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å —Ç–æ—á–Ω—ã–π –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏–∏ –∏ —Å—Ç–∏–ª—è.",
      config: { temperature: 0.2, max_tokens: 2000 },
      stats: { 
        pagesTranslated: 45780, 
        languagePairs: 3,
        accuracyRate: 97.2
      },
      totalTasks: 214,
      completedTasks: 208
    },
    {
      id: 16,
      name: "–ú–µ—Ç–æ–ü—Ä–æ—Ç",
      type: "meeting_protocols",
      description: "–ê–≥–µ–Ω—Ç –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ —Å–æ–≤–µ—â–∞–Ω–∏–π",
      modelId: 1,
      isActive: true,
      systemPrompt: "–í—ã - —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ —Å–æ–≤–µ—â–∞–Ω–∏–π. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ - —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—Ç—å –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–∏ —Å–æ–≤–µ—â–∞–Ω–∏–π, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –≤—ã–¥–µ–ª—è—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è –∏ –∑–∞–¥–∞—á–∏, —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª—ã.",
      config: { temperature: 0.1, max_tokens: 3000 },
      stats: { 
        meetingsProcessed: 2345, 
        averageProcessingTime: "12.4 –º–∏–Ω",
        accuracyRate: 98.7
      },
      totalTasks: 156,
      completedTasks: 154
    }
  ];
  
  // –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–µ–ª–µ–π (–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π)
  const demoIntegrations: Integration[] = [
    { id: 1, name: "GPT-4o", type: "openai", apiUrl: "https://api.openai.com", isActive: true, config: { model: "gpt-4o" } },
    { id: 2, name: "Local Whisper", type: "vllm", apiUrl: "http://localhost:8000", isActive: true, config: { model: "whisper-large-v3" } },
    { id: 3, name: "Task LLM", type: "ollama", apiUrl: "http://localhost:11434", isActive: true, config: { model: "llama3:8b" } },
    { id: 4, name: "Moralis Blockchain API", type: "moralis", apiUrl: "https://deep-index.moralis.io/api/v2", isActive: true, config: { chain: "besu" } }
  ];
  
  // –î–µ–º–æ –∑–∞–¥–∞—á–∏
  const demoTasks: Task[] = [
    { id: 1, title: "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è ‚Ññ2023-56789", description: "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞", status: "in_progress", agentId: 1 },
    { id: 2, title: "–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —Å–æ–≤–µ—â–∞–Ω–∏—è –æ—Ç 20.04.2025", description: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–∏ —Å–æ–≤–µ—â–∞–Ω–∏—è –∏ –≤—ã–¥–µ–ª–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è", status: "pending", agentId: 2 },
    { id: 3, title: "–ê–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–∞ ‚Ññ–î–ì–í-45/2025", description: "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä –∏ –≤—ã–¥–µ–ª–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —É—Å–ª–æ–≤–∏—è –∏ —Ä–∏—Å–∫–∏", status: "completed", agentId: 3 },
    { id: 4, title: "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ –æ—Ç–¥–µ–ª—É —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏", description: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å 15 –∑–∞–¥–∞—á —Å—Ä–µ–¥–∏ 5 —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å —É—á–µ—Ç–æ–º –∏—Ö –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π", status: "pending", agentId: 4 },
    { id: 5, title: "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –æ –±–ª–æ–∫—á–µ–π–Ω-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö", description: "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö –≤ –±–ª–æ–∫—á–µ–π–Ω–µ –∑–∞ 22.04.2025", status: "completed", agentId: 5 }
  ];
  
  // –ó–∞–ø—Ä–æ—Å—ã –∫ API
  const { data: agents = demoAgents, isLoading: isAgentsLoading } = useQuery<Agent[]>({
    queryKey: ['/api/agents'],
    enabled: true, // –ò—Å–ø–æ–ª—å–∑—É–µ–º API
  });
  
  const { data: integrations = demoIntegrations, isLoading: isIntegrationsLoading } = useQuery<Integration[]>({
    queryKey: ['/api/integrations'],
    enabled: true,
  });
  
  const { data: tasks = demoTasks, isLoading: isTasksLoading } = useQuery<Task[]>({
    queryKey: ['/api/tasks'],
    enabled: true,
  });
  
  // –ú—É—Ç–∞—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  const saveAgentMutation = useMutation({
    mutationFn: (agent: Agent) => {
      if (agent.id) {
        return apiRequest('PATCH', `/api/agents/${agent.id}`, agent);
      } else {
        return apiRequest('POST', '/api/agents', agent);
      }
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/agents'] });
      setShowAgentDialog(false);
      setEditingAgent(null);
      toast({
        title: "–£—Å–ø–µ—à–Ω–æ!",
        description: "–ê–≥–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω",
      });
    },
    onError: () => {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–≥–µ–Ω—Ç–∞",
        variant: "destructive",
      });
    }
  });
  
  const updateAgentStatusMutation = useMutation({
    mutationFn: (data: {id: number, isActive: boolean}) => {
      return apiRequest('PATCH', `/api/agents/${data.id}/status`, { isActive: data.isActive });
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/agents'] });
      toast({
        title: "–£—Å–ø–µ—à–Ω–æ!",
        description: "–°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω",
      });
    },
    onError: () => {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞",
        variant: "destructive",
      });
    }
  });
  
  const updateSystemPromptMutation = useMutation({
    mutationFn: (data: {id: number, systemPrompt: string}) => {
      return apiRequest('PATCH', `/api/agents/${data.id}/prompt`, { systemPrompt: data.systemPrompt });
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/agents'] });
      setShowPromptDialog(false);
      toast({
        title: "–£—Å–ø–µ—à–Ω–æ!",
        description: "–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω",
      });
    },
    onError: () => {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç",
        variant: "destructive",
      });
    }
  });
  
  const assignTaskMutation = useMutation({
    mutationFn: (data: {taskId: number, agentId: number}) => {
      return apiRequest('PATCH', `/api/tasks/${data.taskId}/assign`, { agentId: data.agentId });
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/tasks'] });
      queryClient.invalidateQueries({ queryKey: ['/api/agents'] });
      setShowTaskDialog(false);
      setAssigningTask(null);
      toast({
        title: "–£—Å–ø–µ—à–Ω–æ!",
        description: "–ó–∞–¥–∞—á–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∞–≥–µ–Ω—Ç—É",
      });
    },
    onError: () => {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É",
        variant: "destructive",
      });
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
  const handleAddAgent = () => {
    setEditingAgent({
      id: 0,
      name: "",
      type: "citizen_requests",
      description: "",
      ministryId: demoMinistries[0]?.id,  // –î–æ–±–∞–≤–ª—è–µ–º default–Ω–æ–µ –º–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ
      typeId: demoAgentTypes[0]?.id,      // –î–æ–±–∞–≤–ª—è–µ–º default–Ω—ã–π —Ç–∏–ø –∞–≥–µ–Ω—Ç–∞
      modelId: integrations[0]?.id || 0,
      isActive: true,
      systemPrompt: "",
      config: { temperature: 0.3, max_tokens: 1000 }
    });
    setShowAgentDialog(true);
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ PersonaBuilder
  const handleOpenPersonaBuilder = () => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω—É —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    setPersonaConfig({
      name: '',
      model: 'gpt-4o',
      prompt: '',
      knowledge_sources: [],
      triggers: [],
      roles: ['internal']
    });
    setShowPersonaBuilderDialog(true);
  };
  
  const handleEditAgent = (agent: Agent) => {
    setEditingAgent({...agent});
    setShowAgentDialog(true);
  };
  
  const handleToggleAgentStatus = (agent: Agent) => {
    updateAgentStatusMutation.mutate({
      id: agent.id,
      isActive: !agent.isActive
    });
  };
  
  const handleViewAgent = (agent: Agent) => {
    setViewingAgent(agent);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–µ—Ç–∞–ª—è–º –∞–≥–µ–Ω—Ç–∞
    window.location.href = `/ai-agents/${agent.id}`;
  };
  
  const handleEditSystemPrompt = (agent: Agent) => {
    setEditingSystemPrompt(agent.systemPrompt);
    setEditingAgent(agent);
    setShowPromptDialog(true);
  };
  
  const handleAssignTask = (task: Task) => {
    setAssigningTask(task);
    setShowTaskDialog(true);
  };
  
  const getAgentTypeIcon = (type: string) => {
    switch (type) {
      case "citizen_requests":
        return <MessageSquare className="h-5 w-5 text-blue-500" />;
      case "meeting_protocols":
        return <FileCheck className="h-5 w-5 text-purple-500" />;
      case "documents":
        return <FileStack className="h-5 w-5 text-amber-500" />;
      case "task_management":
        return <LayoutDashboard className="h-5 w-5 text-green-500" />;
      case "blockchain":
        return <Database className="h-5 w-5 text-red-500" />;
      case "translator":
        return <Globe className="h-5 w-5 text-teal-500" />;
      case "legal":
        return <ScrollText className="h-5 w-5 text-indigo-500" />;
      case "medical":
        return <Stethoscope className="h-5 w-5 text-pink-500" />;
      case "labor":
        return <Briefcase className="h-5 w-5 text-yellow-500" />;
      case "mvd":
        return <Camera className="h-5 w-5 text-slate-500" />;
      case "education":
        return <GraduationCap className="h-5 w-5 text-cyan-500" />;
      case "energy":
        return <Flame className="h-5 w-5 text-orange-500" />;
      case "trade":
        return <BarChart2 className="h-5 w-5 text-violet-500" />;
      case "transport":
        return <Truck className="h-5 w-5 text-lime-500" />;
      case "agriculture":
        return <BookOpen className="h-5 w-5 text-emerald-500" />;
      default:
        return <Bot className="h-5 w-5 text-gray-500" />;
    }
  };
  
  const getAgentTypeLabel = (type: string) => {
    switch (type) {
      case "citizen_requests":
        return "–û–±—Ä–∞—â–µ–Ω–∏—è –≥—Ä–∞–∂–¥–∞–Ω";
      case "meeting_protocols":
        return "–ü—Ä–æ—Ç–æ–∫–æ–ª—ã —Å–æ–≤–µ—â–∞–Ω–∏–π";
      case "documents":
        return "–î–æ–∫—É–º–µ–Ω—Ç—ã";
      case "task_management":
        return "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏";
      case "blockchain":
        return "–ë–ª–æ–∫—á–µ–π–Ω";
      case "translator":
        return "–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫";
      case "legal":
        return "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç";
      case "medical":
        return "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç";
      case "labor":
        return "–¢—Ä—É–¥–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã";
      case "mvd":
        return "–ú–í–î";
      case "education":
        return "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ";
      case "energy":
        return "–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞";
      case "trade":
        return "–¢–æ—Ä–≥–æ–≤–ª—è";
      case "transport":
        return "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç";
      case "agriculture":
        return "–°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ";
      default:
        return "–û–±—â–∏–π";
    }
  };
  
  const getModelTypeIcon = (type: string) => {
    switch (type) {
      case "openai":
        return <Zap className="h-5 w-5 text-green-500" />;
      case "vllm":
        return <FlaskConical className="h-5 w-5 text-blue-500" />;
      case "ollama":
        return <SearchCode className="h-5 w-5 text-orange-500" />;
      case "moralis":
        return <Server className="h-5 w-5 text-purple-500" />;
      default:
        return <Brain className="h-5 w-5 text-gray-500" />;
    }
  };
  
  const getAgentTypeColor = (type: string): string => {
    switch (type) {
      case "citizen_requests":
        return "#3b82f6"; // blue-500
      case "meeting_protocols":
        return "#8b5cf6"; // purple-500
      case "documents":
        return "#f59e0b"; // amber-500
      case "task_management":
        return "#10b981"; // green-500
      case "blockchain":
        return "#ef4444"; // red-500
      case "translator":
        return "#14b8a6"; // teal-500
      case "legal":
        return "#6366f1"; // indigo-500
      case "medical":
        return "#ec4899"; // pink-500
      case "labor":
        return "#facc15"; // yellow-500
      case "mvd":
        return "#64748b"; // slate-500
      case "education":
        return "#06b6d4"; // cyan-500
      case "energy":
        return "#f97316"; // orange-500
      case "trade":
        return "#8b5cf6"; // violet-500
      case "transport":
        return "#84cc16"; // lime-500
      case "agriculture":
        return "#10b981"; // emerald-500
      default:
        return "#6b7280"; // gray-500
    }
  };
  
  return (
    <>
      <div className="mb-6">
        <div className="sm:flex sm:items-center sm:justify-between">
          <div>
            <h1 className="text-2xl font-semibold text-neutral-900">–ò–ò-–∞–≥–µ–Ω—Ç—ã</h1>
            <p className="mt-2 text-sm text-neutral-700">
              –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            </p>
          </div>
          <div className="mt-4 sm:mt-0 flex space-x-3">
            <Button onClick={handleAddAgent}>
              <Plus className="h-4 w-4 mr-2" />
              –î–æ–±–∞–≤–∏—Ç—å –∞–≥–µ–Ω—Ç–∞
            </Button>

          </div>
        </div>
      </div>
      
      <Tabs defaultValue="active">
        <TabsList className="mb-4">
          <TabsTrigger value="active" className="flex items-center">
            <CheckCircle className="h-4 w-4 mr-2" />
            –ê–∫—Ç–∏–≤–Ω—ã–µ
          </TabsTrigger>
          <TabsTrigger value="all" className="flex items-center">
            <Bot className="h-4 w-4 mr-2" />
            –í—Å–µ –∞–≥–µ–Ω—Ç—ã
          </TabsTrigger>
          <TabsTrigger value="ministry" className="flex items-center">
            <FileStack className="h-4 w-4 mr-2" />
            –ü–æ –º–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–∞–º
          </TabsTrigger>
          <TabsTrigger value="tasks" className="flex items-center">
            <FileCheck className="h-4 w-4 mr-2" />
            –ó–∞–¥–∞—á–∏ –∞–≥–µ–Ω—Ç–æ–≤
          </TabsTrigger>
        </TabsList>
        
        <TabsContent value="active">
          {isAgentsLoading ? (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 animate-pulse">
              {[1, 2, 3].map(i => (
                <div key={i} className="h-48 bg-neutral-100 rounded-lg"></div>
              ))}
            </div>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {agents
                .filter(agent => agent.isActive)
                .map(agent => {
                  const integration = integrations.find(i => i.id === agent.modelId);
                  const agentTasks = tasks.filter(t => t.agentId === agent.id);
                  const completedTasksCount = agentTasks.filter(t => t.status === "completed").length;
                  const progress = agentTasks.length > 0 ? Math.round((completedTasksCount / agentTasks.length) * 100) : 100;
                  
                  return (
                    <Card key={agent.id} className="overflow-hidden border-t-4" style={{ borderTopColor: getAgentTypeColor(agent.type) }}>
                      <CardHeader className="pb-4">
                        <div className="flex justify-between items-start">
                          <div className="flex items-center">
                            {getAgentTypeIcon(agent.type)}
                            <CardTitle className="ml-2 text-lg">
                              {agent.name}
                            </CardTitle>
                          </div>
                          <Badge className={agent.isActive ? "bg-green-100 text-green-800" : "bg-neutral-100 text-neutral-800"}>
                            {agent.isActive ? "–ê–∫—Ç–∏–≤–µ–Ω" : "–û—Ç–∫–ª—é—á–µ–Ω"}
                          </Badge>
                        </div>
                        <CardDescription className="mt-1">
                          {agent.description || `–ê–≥–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å ${getAgentTypeLabel(agent.type).toLowerCase()}`}
                        </CardDescription>
                      </CardHeader>
                      <CardContent className="pb-4">
                        <div className="space-y-3">
                          <div className="flex items-center justify-between text-sm">
                            <span className="text-neutral-500 flex items-center">
                              <Brain className="h-4 w-4 mr-1" />
                              –ú–æ–¥–µ–ª—å:
                            </span>
                            <span className="font-medium flex items-center">
                              {integration && getModelTypeIcon(integration.type)}
                              <span className="ml-1">{integration?.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å"}</span>
                            </span>
                          </div>
                          
                          <div className="flex items-center justify-between text-sm">
                            <span className="text-neutral-500 flex items-center">
                              <FileCheck className="h-4 w-4 mr-1" />
                              –ó–∞–¥–∞—á–∏:
                            </span>
                            <span className="font-medium">{agent.completedTasks || completedTasksCount}/{agent.totalTasks || agentTasks.length}</span>
                          </div>
                          
                          <div className="w-full bg-neutral-100 rounded-full h-2">
                            <div className="bg-primary h-2 rounded-full" style={{ width: `${progress}%` }}></div>
                          </div>
                        </div>
                      </CardContent>
                      <CardFooter className="flex justify-between border-t pt-4 bg-neutral-50">
                        <Button variant="outline" size="sm" onClick={() => handleEditAgent(agent)}>
                          –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                        </Button>
                        <div className="flex space-x-2">
                          <Button variant="ghost" size="sm" onClick={() => handleEditSystemPrompt(agent)}>
                            <Edit className="h-4 w-4" />
                          </Button>
                          <Button variant="ghost" size="sm" onClick={() => handleToggleAgentStatus(agent)}>
                            {agent.isActive ? <XCircle className="h-4 w-4 text-red-500" /> : <CheckCircle className="h-4 w-4 text-green-500" />}
                          </Button>
                        </div>
                      </CardFooter>
                    </Card>
                  );
                })}
                
              {agents.filter(agent => agent.isActive).length === 0 && (
                <div className="col-span-full flex flex-col items-center justify-center p-8 bg-neutral-50 rounded-lg border border-dashed text-center">
                  <Bot className="h-12 w-12 text-neutral-300 mb-4" />
                  <h3 className="text-lg font-medium text-neutral-900 mb-2">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤</h3>
                  <p className="text-neutral-500 max-w-md mb-6">
                    –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã—Ö, —á—Ç–æ–±—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã.
                  </p>
                  <Button onClick={handleAddAgent}>
                    <Plus className="h-4 w-4 mr-2" />
                    –°–æ–∑–¥–∞—Ç—å –∞–≥–µ–Ω—Ç–∞
                  </Button>
                </div>
              )}
            </div>
          )}
        </TabsContent>
        
        <TabsContent value="all">
          <div className="space-y-4">
            {isAgentsLoading ? (
              <div className="animate-pulse space-y-4">
                {[1, 2, 3, 4].map(i => (
                  <div key={i} className="h-32 bg-neutral-100 rounded-lg"></div>
                ))}
              </div>
            ) : (
              agents.map(agent => {
                const integration = integrations.find(i => i.id === agent.modelId);
                return (
                  <Card key={agent.id} className="overflow-hidden">
                    <div className="flex flex-col sm:flex-row">
                      <div className="w-2" style={{ backgroundColor: getAgentTypeColor(agent.type) }}></div>
                      <div className="flex-1 p-4 sm:p-6">
                        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-4">
                          <div className="flex items-center mb-2 sm:mb-0">
                            {getAgentTypeIcon(agent.type)}
                            <h3 className="text-lg font-semibold ml-2">{agent.name}</h3>
                            <Badge className={`ml-2 ${agent.isActive ? "bg-green-100 text-green-800" : "bg-neutral-100 text-neutral-800"}`}>
                              {agent.isActive ? "–ê–∫—Ç–∏–≤–µ–Ω" : "–û—Ç–∫–ª—é—á–µ–Ω"}
                            </Badge>
                          </div>
                          <div className="flex space-x-2">
                            <Button variant="outline" size="sm" onClick={() => handleEditAgent(agent)}>
                              <Edit className="h-4 w-4 mr-1" />
                              –ò–∑–º–µ–Ω–∏—Ç—å
                            </Button>
                            <Button 
                              variant={agent.isActive ? "ghost" : "outline"} 
                              size="sm"
                              onClick={() => handleToggleAgentStatus(agent)}
                              className={agent.isActive ? "text-red-500 hover:text-red-700" : "text-green-500 hover:text-green-700"}
                            >
                              {agent.isActive ? (
                                <>
                                  <XCircle className="h-4 w-4 mr-1" />
                                  –û—Ç–∫–ª—é—á–∏—Ç—å
                                </>
                              ) : (
                                <>
                                  <CheckCircle className="h-4 w-4 mr-1" />
                                  –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å
                                </>
                              )}
                            </Button>
                          </div>
                        </div>
                        
                        <div className="text-sm text-neutral-600 mb-4">{agent.description}</div>
                        
                        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                          <div className="flex items-center">
                            <div className="mr-2 p-2 bg-neutral-100 rounded-full">
                              {getModelTypeIcon(integration?.type || "")}
                            </div>
                            <div>
                              <div className="text-xs text-neutral-500">–ú–æ–¥–µ–ª—å</div>
                              <div className="font-medium">{integration?.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å"}</div>
                            </div>
                          </div>
                          
                          <div className="flex items-center">
                            <div className="mr-2 p-2 bg-neutral-100 rounded-full">
                              <FileCheck className="h-5 w-5 text-blue-500" />
                            </div>
                            <div>
                              <div className="text-xs text-neutral-500">–¢–∏–ø</div>
                              <div className="font-medium">{getAgentTypeLabel(agent.type)}</div>
                            </div>
                          </div>
                          
                          <div className="flex items-center">
                            <Button variant="ghost" size="sm" onClick={() => handleEditSystemPrompt(agent)}>
                              <FileStack className="h-4 w-4 mr-1" />
                              –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
                            </Button>
                          </div>
                        </div>
                      </div>
                    </div>
                  </Card>
                );
              })
            )}
            
            {agents.length === 0 && (
              <Card>
                <CardContent className="flex flex-col items-center justify-center p-10">
                  <Bot className="h-16 w-16 text-neutral-300 mb-4" />
                  <h3 className="text-xl font-medium text-neutral-900 mb-2">–ù–µ—Ç –∞–≥–µ–Ω—Ç–æ–≤</h3>
                  <p className="text-neutral-500 text-center max-w-md mb-6">
                    –°–æ–∑–¥–∞–π—Ç–µ –ò–ò-–∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π, –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ —Å–æ–≤–µ—â–∞–Ω–∏–π –∏ –¥—Ä—É–≥–∏—Ö –∑–∞–¥–∞—á.
                  </p>
                  <Button onClick={handleAddAgent}>
                    <Plus className="h-4 w-4 mr-2" />
                    –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
                  </Button>
                </CardContent>
              </Card>
            )}
          </div>
        </TabsContent>
        
        <TabsContent value="ministry">
          <div className="space-y-8">
            {isAgentsLoading ? (
              <div className="animate-pulse space-y-6">
                {[1, 2, 3].map(i => (
                  <div key={i} className="space-y-2">
                    <div className="h-6 bg-neutral-100 rounded w-1/3"></div>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                      <div className="h-48 bg-neutral-100 rounded-lg"></div>
                      <div className="h-48 bg-neutral-100 rounded-lg"></div>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <>
                {demoMinistries.map(ministry => {
                  const ministryAgents = agents.filter(a => a.ministryId === ministry.id);
                  
                  if (ministryAgents.length === 0) return null;
                  
                  return (
                    <div key={ministry.id} className="space-y-4">
                      <div className="flex items-center space-x-2 border-b pb-2">
                        <span className="text-2xl">{ministry.icon}</span>
                        <h2 className="text-xl font-semibold">{ministry.name}</h2>
                        <Badge variant="outline" className="ml-2">{ministryAgents.length} –∞–≥–µ–Ω—Ç–æ–≤</Badge>
                      </div>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                        {ministryAgents.map(agent => {
                          const integration = integrations.find(i => i.id === agent.modelId);
                          const agentType = demoAgentTypes.find(t => t.id === agent.typeId);
                          const agentTasks = tasks.filter(t => t.agentId === agent.id);
                          const completedTasksCount = agentTasks.filter(t => t.status === "completed").length;
                          const progress = agentTasks.length > 0 ? Math.round((completedTasksCount / agentTasks.length) * 100) : 100;
                          
                          return (
                            <Card key={agent.id} className="overflow-hidden border-t-4" style={{ borderTopColor: getAgentTypeColor(agent.type) }}>
                              <CardHeader className="pb-4">
                                <div className="flex justify-between items-start">
                                  <div className="flex items-center">
                                    {getAgentTypeIcon(agent.type)}
                                    <CardTitle className="ml-2 text-lg">
                                      {agent.name}
                                    </CardTitle>
                                  </div>
                                  <Badge className={agent.isActive ? "bg-green-100 text-green-800" : "bg-neutral-100 text-neutral-800"}>
                                    {agent.isActive ? "–ê–∫—Ç–∏–≤–µ–Ω" : "–û—Ç–∫–ª—é—á–µ–Ω"}
                                  </Badge>
                                </div>
                                <CardDescription className="mt-1">
                                  {agent.description || (agentType ? agentType.description : `–ê–≥–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å ${getAgentTypeLabel(agent.type).toLowerCase()}`)}
                                </CardDescription>
                              </CardHeader>
                              <CardContent className="pb-4">
                                <div className="space-y-3">
                                  <div className="flex items-center justify-between text-sm">
                                    <span className="text-neutral-500 flex items-center">
                                      <Brain className="h-4 w-4 mr-1" />
                                      –ú–æ–¥–µ–ª—å:
                                    </span>
                                    <span className="font-medium flex items-center">
                                      {integration && getModelTypeIcon(integration.type)}
                                      <span className="ml-1">{integration?.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å"}</span>
                                    </span>
                                  </div>
                                  
                                  {agent.stats && (
                                    <>
                                      {Object.entries(agent.stats).map(([key, value], i) => (
                                        <div key={i} className="flex items-center justify-between text-sm">
                                          <span className="text-neutral-500 capitalize">
                                            {key.replace(/([A-Z])/g, ' $1').replace(/([A-Z][a-z])/g, ' $1').toLowerCase()}:
                                          </span>
                                          <span className="font-medium">{String(value)}</span>
                                        </div>
                                      ))}
                                    </>
                                  )}
                                  
                                  <div className="flex items-center justify-between text-sm">
                                    <span className="text-neutral-500 flex items-center">
                                      <FileCheck className="h-4 w-4 mr-1" />
                                      –ó–∞–¥–∞—á–∏:
                                    </span>
                                    <span className="font-medium">{agent.completedTasks || completedTasksCount}/{agent.totalTasks || agentTasks.length}</span>
                                  </div>
                                  
                                  <div className="w-full bg-neutral-100 rounded-full h-2">
                                    <div className="bg-primary h-2 rounded-full" style={{ width: `${progress}%` }}></div>
                                  </div>
                                </div>
                              </CardContent>
                              <CardFooter className="flex justify-between border-t pt-4 bg-neutral-50">
                                <Button variant="outline" size="sm" onClick={() => handleEditAgent(agent)}>
                                  –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                                </Button>
                                <div className="flex space-x-2">
                                  <Button variant="ghost" size="sm" onClick={() => handleEditSystemPrompt(agent)}>
                                    <Edit className="h-4 w-4" />
                                  </Button>
                                  <Button variant="ghost" size="sm" onClick={() => handleToggleAgentStatus(agent)}>
                                    {agent.isActive ? <XCircle className="h-4 w-4 text-red-500" /> : <CheckCircle className="h-4 w-4 text-green-500" />}
                                  </Button>
                                </div>
                              </CardFooter>
                            </Card>
                          );
                        })}
                      </div>
                    </div>
                  );
                })}
                
                {agents.filter(agent => !agent.ministryId).length > 0 && (
                  <div className="space-y-4">
                    <div className="flex items-center space-x-2 border-b pb-2">
                      <Bot className="h-6 w-6 text-neutral-600" />
                      <h2 className="text-xl font-semibold">–û–±—â–∏–µ –∞–≥–µ–Ω—Ç—ã</h2>
                      <Badge variant="outline" className="ml-2">{agents.filter(agent => !agent.ministryId).length} –∞–≥–µ–Ω—Ç–æ–≤</Badge>
                    </div>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                      {agents
                        .filter(agent => !agent.ministryId)
                        .map(agent => {
                          const integration = integrations.find(i => i.id === agent.modelId);
                          const agentTasks = tasks.filter(t => t.agentId === agent.id);
                          const completedTasksCount = agentTasks.filter(t => t.status === "completed").length;
                          const progress = agentTasks.length > 0 ? Math.round((completedTasksCount / agentTasks.length) * 100) : 100;
                          
                          return (
                            <Card key={agent.id} className="overflow-hidden border-t-4" style={{ borderTopColor: getAgentTypeColor(agent.type) }}>
                              <CardHeader className="pb-4">
                                <div className="flex justify-between items-start">
                                  <div className="flex items-center">
                                    {getAgentTypeIcon(agent.type)}
                                    <CardTitle className="ml-2 text-lg">
                                      {agent.name}
                                    </CardTitle>
                                  </div>
                                  <Badge className={agent.isActive ? "bg-green-100 text-green-800" : "bg-neutral-100 text-neutral-800"}>
                                    {agent.isActive ? "–ê–∫—Ç–∏–≤–µ–Ω" : "–û—Ç–∫–ª—é—á–µ–Ω"}
                                  </Badge>
                                </div>
                                <CardDescription className="mt-1">
                                  {agent.description || `–ê–≥–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å ${getAgentTypeLabel(agent.type).toLowerCase()}`}
                                </CardDescription>
                              </CardHeader>
                              <CardContent className="pb-4">
                                <div className="space-y-3">
                                  <div className="flex items-center justify-between text-sm">
                                    <span className="text-neutral-500 flex items-center">
                                      <Brain className="h-4 w-4 mr-1" />
                                      –ú–æ–¥–µ–ª—å:
                                    </span>
                                    <span className="font-medium flex items-center">
                                      {integration && getModelTypeIcon(integration.type)}
                                      <span className="ml-1">{integration?.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å"}</span>
                                    </span>
                                  </div>
                                  
                                  <div className="flex items-center justify-between text-sm">
                                    <span className="text-neutral-500 flex items-center">
                                      <FileCheck className="h-4 w-4 mr-1" />
                                      –ó–∞–¥–∞—á–∏:
                                    </span>
                                    <span className="font-medium">{agent.completedTasks || completedTasksCount}/{agent.totalTasks || agentTasks.length}</span>
                                  </div>
                                  
                                  <div className="w-full bg-neutral-100 rounded-full h-2">
                                    <div className="bg-primary h-2 rounded-full" style={{ width: `${progress}%` }}></div>
                                  </div>
                                </div>
                              </CardContent>
                              <CardFooter className="flex justify-between border-t pt-4 bg-neutral-50">
                                <Button variant="outline" size="sm" onClick={() => handleEditAgent(agent)}>
                                  –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                                </Button>
                                <div className="flex space-x-2">
                                  <Button variant="ghost" size="sm" onClick={() => handleEditSystemPrompt(agent)}>
                                    <Edit className="h-4 w-4" />
                                  </Button>
                                  <Button variant="ghost" size="sm" onClick={() => handleToggleAgentStatus(agent)}>
                                    {agent.isActive ? <XCircle className="h-4 w-4 text-red-500" /> : <CheckCircle className="h-4 w-4 text-green-500" />}
                                  </Button>
                                </div>
                              </CardFooter>
                            </Card>
                          );
                        })}
                    </div>
                  </div>
                )}
              </>
            )}
          </div>
        </TabsContent>

        <TabsContent value="tasks">
          <div className="space-y-4">
            {isTasksLoading ? (
              <div className="animate-pulse space-y-4">
                {[1, 2, 3, 4].map(i => (
                  <div key={i} className="h-20 bg-neutral-100 rounded-lg"></div>
                ))}
              </div>
            ) : (
              tasks.map(task => {
                const agent = agents.find(a => a.id === task.agentId);
                return (
                  <Card key={task.id}>
                    <CardContent className="p-4">
                      <div className="flex items-center justify-between">
                        <div className="flex-1">
                          <div className="flex items-center mb-1">
                            <h3 className="font-medium text-neutral-900">{task.title}</h3>
                            <Badge className={`ml-2 ${getStatusColor(task.status)}`}>
                              {getStatusLabel(task.status)}
                            </Badge>
                          </div>
                          <p className="text-sm text-neutral-600">{task.description}</p>
                        </div>
                        
                        <div className="ml-4 flex items-center">
                          {agent ? (
                            <div className="flex items-center bg-neutral-100 p-2 rounded-md">
                              <Bot className="h-4 w-4 text-primary mr-2" />
                              <span className="text-sm font-medium">{agent.name}</span>
                            </div>
                          ) : (
                            <Button variant="outline" size="sm" onClick={() => handleAssignTask(task)}>
                              <UserCog className="h-4 w-4 mr-1" />
                              –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–≥–µ–Ω—Ç–∞
                            </Button>
                          )}
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                );
              })
            )}
            
            {tasks.length === 0 && (
              <Card>
                <CardContent className="flex flex-col items-center justify-center p-6">
                  <FileCheck className="h-12 w-12 text-neutral-300 mb-4" />
                  <h3 className="text-lg font-medium text-neutral-900 mb-2">–ù–µ—Ç –∑–∞–¥–∞—á</h3>
                  <p className="text-neutral-500 text-center max-w-md">
                    –ó–∞–¥–∞—á–∏ –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤ –±—É–¥—É—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è –∑–¥–µ—Å—å –ø–æ –º–µ—Ä–µ –∏—Ö —Å–æ–∑–¥–∞–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ.
                  </p>
                </CardContent>
              </Card>
            )}
          </div>
        </TabsContent>
      </Tabs>
      
      {/* –î–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞ */}
      <Dialog open={showAgentDialog} onOpenChange={setShowAgentDialog}>
        <DialogContent className="sm:max-w-lg">
          <DialogHeader>
            <DialogTitle>{editingAgent?.id ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞' : '–ù–æ–≤—ã–π –∞–≥–µ–Ω—Ç'}</DialogTitle>
            <DialogDescription>
              –£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ò–ò-–∞–≥–µ–Ω—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.
            </DialogDescription>
          </DialogHeader>
          
          {editingAgent && (
            <div className="space-y-4 py-4">
              <div className="space-y-2">
                <Label htmlFor="agent-name">–ù–∞–∑–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞</Label>
                <Input 
                  id="agent-name" 
                  value={editingAgent.name} 
                  onChange={(e) => setEditingAgent({...editingAgent, name: e.target.value})}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞"
                />
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="agent-type">–¢–∏–ø –∞–≥–µ–Ω—Ç–∞</Label>
                <Select 
                  value={editingAgent.type}
                  onValueChange={(value) => setEditingAgent({...editingAgent, type: value})}
                >
                  <SelectTrigger id="agent-type">
                    <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–≥–µ–Ω—Ç–∞" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="citizen_requests">–û–±—Ä–∞—â–µ–Ω–∏—è –≥—Ä–∞–∂–¥–∞–Ω</SelectItem>
                    <SelectItem value="meetings">–ü—Ä–æ—Ç–æ–∫–æ–ª—ã —Å–æ–≤–µ—â–∞–Ω–∏–π</SelectItem>
                    <SelectItem value="documents">–î–æ–∫—É–º–µ–Ω—Ç—ã</SelectItem>
                    <SelectItem value="task_management">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏</SelectItem>
                    <SelectItem value="blockchain">–ë–ª–æ–∫—á–µ–π–Ω</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="agent-ministry">–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ</Label>
                <Select 
                  value={editingAgent.ministryId?.toString() || ""}
                  onValueChange={(value) => setEditingAgent({...editingAgent, ministryId: parseInt(value)})}
                >
                  <SelectTrigger id="agent-ministry">
                    <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ" />
                  </SelectTrigger>
                  <SelectContent>
                    {demoMinistries.map(ministry => (
                      <SelectItem key={ministry.id} value={ministry.id.toString()}>
                        {ministry.icon ? `${ministry.icon} ` : ""}{ministry.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="agent-type-id">–¢–∏–ø –∞–≥–µ–Ω—Ç–∞ (–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è)</Label>
                <Select 
                  value={editingAgent.typeId?.toString() || ""}
                  onValueChange={(value) => setEditingAgent({...editingAgent, typeId: parseInt(value)})}
                >
                  <SelectTrigger id="agent-type-id">
                    <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –∞–≥–µ–Ω—Ç–∞" />
                  </SelectTrigger>
                  <SelectContent>
                    {demoAgentTypes.map(type => (
                      <SelectItem key={type.id} value={type.id.toString()}>
                        {type.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="agent-description">–û–ø–∏—Å–∞–Ω–∏–µ</Label>
                <Textarea 
                  id="agent-description" 
                  value={editingAgent.description || ''} 
                  onChange={(e) => setEditingAgent({...editingAgent, description: e.target.value})}
                  placeholder="–û–ø–∏—à–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞"
                  rows={3}
                />
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="agent-model">–ú–æ–¥–µ–ª—å (–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è)</Label>
                <Select 
                  value={editingAgent.modelId.toString()}
                  onValueChange={(value) => setEditingAgent({...editingAgent, modelId: parseInt(value)})}
                >
                  <SelectTrigger id="agent-model">
                    <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å" />
                  </SelectTrigger>
                  <SelectContent>
                    {integrations.map(integration => (
                      <SelectItem key={integration.id} value={integration.id.toString()}>
                        {integration.name} ({integration.type})
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="agent-prompt">–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç</Label>
                <Textarea 
                  id="agent-prompt" 
                  value={editingAgent.systemPrompt} 
                  onChange={(e) => setEditingAgent({...editingAgent, systemPrompt: e.target.value})}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–≥–µ–Ω—Ç–∞"
                  rows={4}
                />
                <p className="text-xs text-neutral-500">
                  –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–æ–ª—å –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ò–ò-–∞–≥–µ–Ω—Ç–∞.
                </p>
              </div>
              
              <div className="space-y-2">
                <div className="flex items-center justify-between">
                  <Label htmlFor="agent-active">–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</Label>
                  <Switch 
                    id="agent-active"
                    checked={editingAgent.isActive}
                    onCheckedChange={(checked) => setEditingAgent({...editingAgent, isActive: checked})}
                  />
                </div>
                <p className="text-xs text-neutral-500">
                  –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã –Ω–µ –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏.
                </p>
              </div>
            </div>
          )}
          
          <DialogFooter>
            <Button variant="outline" onClick={() => setShowAgentDialog(false)}>–û—Ç–º–µ–Ω–∞</Button>
            <Button 
              onClick={() => editingAgent && saveAgentMutation.mutate(editingAgent)}
              disabled={saveAgentMutation.isPending}
            >
              {saveAgentMutation.isPending && <RefreshCw className="h-4 w-4 mr-2 animate-spin" />}
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
      
      {/* –î–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ */}
      <Dialog open={showPromptDialog} onOpenChange={setShowPromptDialog}>
        <DialogContent className="sm:max-w-xl">
          <DialogHeader>
            <DialogTitle>–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–≥–µ–Ω—Ç–∞ "{editingAgent?.name}"</DialogTitle>
            <DialogDescription>
              –ò–∑–º–µ–Ω–∏—Ç–µ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∞–≥–µ–Ω—Ç–∞.
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-4 py-4">
            <Textarea 
              value={editingSystemPrompt} 
              onChange={(e) => setEditingSystemPrompt(e.target.value)}
              placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–≥–µ–Ω—Ç–∞"
              rows={10}
              className="font-mono text-sm"
            />
            <p className="text-sm text-neutral-500">
              –•–æ—Ä–æ—à–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–æ–ª–∂–µ–Ω —á–µ—Ç–∫–æ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —Ä–æ–ª—å –∞–≥–µ–Ω—Ç–∞, –µ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ —à–∞–≥–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á.
            </p>
          </div>
          
          <DialogFooter>
            <Button variant="outline" onClick={() => setShowPromptDialog(false)}>–û—Ç–º–µ–Ω–∞</Button>
            <Button 
              onClick={() => editingAgent && updateSystemPromptMutation.mutate({
                id: editingAgent.id,
                systemPrompt: editingSystemPrompt
              })}
              disabled={updateSystemPromptMutation.isPending}
            >
              {updateSystemPromptMutation.isPending && <RefreshCw className="h-4 w-4 mr-2 animate-spin" />}
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
      
      {/* –î–∏–∞–ª–æ–≥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∞–≥–µ–Ω—Ç—É */}
      <Dialog open={showTaskDialog} onOpenChange={setShowTaskDialog}>
        <DialogContent className="sm:max-w-lg">
          <DialogHeader>
            <DialogTitle>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∞–≥–µ–Ω—Ç—É</DialogTitle>
            <DialogDescription>
              –í—ã–±–µ—Ä–∏—Ç–µ –ò–ò-–∞–≥–µ–Ω—Ç–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ "{assigningTask?.title}".
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-4 py-4">
            <div className="space-y-2">
              <Label htmlFor="task-agent">–ê–≥–µ–Ω—Ç</Label>
              <Select 
                onValueChange={(value) => {
                  if (assigningTask) {
                    assignTaskMutation.mutate({
                      taskId: assigningTask.id,
                      agentId: parseInt(value)
                    });
                  }
                }}
              >
                <SelectTrigger id="task-agent">
                  <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∞–≥–µ–Ω—Ç–∞" />
                </SelectTrigger>
                <SelectContent>
                  {agents
                    .filter(agent => agent.isActive)
                    .map(agent => (
                      <SelectItem key={agent.id} value={agent.id.toString()}>
                        {agent.name} ({getAgentTypeLabel(agent.type)})
                      </SelectItem>
                    ))}
                </SelectContent>
              </Select>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </>
  );
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getAgentTypeColor(type: string): string {
  switch (type) {
    case "citizen_requests":
      return "#3b82f6"; // blue-500
    case "meetings":
      return "#8b5cf6"; // purple-500
    case "documents":
      return "#f59e0b"; // amber-500
    case "task_management":
      return "#10b981"; // green-500
    case "blockchain":
      return "#ef4444"; // red-500
    default:
      return "#6b7280"; // gray-500
  }
}

function getStatusColor(status: string): string {
  switch (status) {
    case "pending":
      return "bg-yellow-100 text-yellow-800";
    case "in_progress":
      return "bg-blue-100 text-blue-800";
    case "completed":
      return "bg-green-100 text-green-800";
    case "failed":
      return "bg-red-100 text-red-800";
    default:
      return "bg-neutral-100 text-neutral-800";
  }
}

function getStatusLabel(status: string): string {
  switch (status) {
    case "pending":
      return "–û–∂–∏–¥–∞–µ—Ç";
    case "in_progress":
      return "–í –ø—Ä–æ—Ü–µ—Å—Å–µ";
    case "completed":
      return "–ó–∞–≤–µ—Ä—à–µ–Ω–æ";
    case "failed":
      return "–û—à–∏–±–∫–∞";
    default:
      return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
  }
}

export default AIAgentsPage;