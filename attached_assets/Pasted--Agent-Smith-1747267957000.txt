Вот сводка ключевых идей из ваших зарисовок и предложение, как их встроить в архитектуру Agent Smith:

1. Парсинг eOtinish → API → БД → «карточки» запросов
Идея:

Вытягивать поступающие обращения из eOtinish-API,

Сохранять «сырые» данные в БД,

Генерировать из них сущности «TaskCard» для дальнейшей обработки в канбане.

Реализация:

ETL-микросервис

Новый модуль ingest-eotinish.ts внутри server/;

CRON-задача или Webhook: периодически пуллить новые обращения.

Схема в БД

sql
Копировать
Редактировать
CREATE TABLE raw_requests (
  id            UUID PRIMARY KEY,
  source_id     TEXT UNIQUE,
  payload       JSONB,
  ingested_at   TIMESTAMP DEFAULT now()
);
CREATE TABLE task_cards (
  id            UUID PRIMARY KEY,
  raw_request_id UUID REFERENCES raw_requests(id),
  status        TEXT,           -- e.g. “new”, “in_progress”, “done”
  assigned_to   UUID,           -- user_id из RBAC
  created_at    TIMESTAMP DEFAULT now(),
  updated_at    TIMESTAMP
);
API-эндпоинт

POST /api/ingest/eotinish – ручной триггер (для dev/testing)

GET /api/task-cards?status=new – фронту для отображения новых карточек

2. Построение орг-структуры + RBAC-binding
Идея:

Автоматически подтягивать из вашей системы пользователей и ролей,

Создавать «отделы» и «группы» с привязкой к RBAC,

Авто-назначение карточек на базовые отделы/ролей.

Реализация:

Модель организаций

ts
Копировать
Редактировать
interface Department {
  id: string;
  name: string;
  parentId?: string;
}
interface User {
  id: string; name: string;
  departmentId: string;
  roles: string[];
}
Импорт из RBAC

Сервис sync-departments.ts читает из внешнего источника (LDAP, Keycloak, собственное API),

Заполняет таблицы departments и users.

Логика автопостановки

При создании task_card, если нет assigned_to, берём пул пользователей отдела из business-rules и назначаем первым свободным.

3. Статусы, подтверждение выполнения и наблюдаемость
Идея:

Отслеживать, в каком статусе каждая карточка: New → In Progress → Awaiting Confirmation → Done.

Фиксировать таймштампы переходов для метрик эффективности.

Логировать каждое действие → в Blockchain.

Реализация:

Статусы в task_cards.status

Добавить статусы awaiting_confirmation.

История изменений

Таблица task_card_history (card_id, prev_status, new_status, user_id, ts).

LLM-наблюдаемость

Вынести в отдельный UI-таб («Observability»): показать

все LLM-вызовы (prompt, tokens_in/out, latency),

ссылки на task_card_history.

Запись в блокчейн

По завершающему переходу в done, собрать пакет данных (card_id, история статусов, итоговый ответ) и через Moralis/Hyperledger Besu залогировать транзакцию.

4. Рефактор UI: убрать «Переводчик», объединить «History» и «Observability»
Идея:

Убрать модуль «Переводчик» из основного меню (если он мало используется).

Создать внутри дашборда один таб «История» с подтабами:

Карточки – хронология запросов

LLM-метрики – токены, latency, usage

Blockchain – ссылки на транзакции

Реализация:

В client/src/routes.tsx — удалить маршрут /translator.

В Dashboard добавить компонент-таббер с тремя панелями.

Подключить через API:

/api/task-cards/history

/api/llm/observability

/api/blockchain/logs

5. Автоматическая обработка «агентами по орг-структуре»
Идея:

Каждую новую карточку автоматически направлять на прогон через набор скриптов-агентов (RAG + бизнес-логика),

Сохранять результаты в task_card_history и саму карточку обновлять.

Реализация:

Worker-процесс

Новый модуль agent-processor.ts: слушает очередь RabbitMQ / Kafka «new_task_cards».

Вызывает нужные LLM-агенты, business-правила, формирует рекомендацию.

Интеграция с RBAC

В рамках обработки решать: кто следующий бек-офисный пользователь – назначить ему card.

Логирование результатов

Каждый шаг: history.create({ … }).

Дорожная карта внедрения
Спринт 1 (1–2 недели)

Модуль парсинга eOtinish → raw_requests → task_cards

Схемы в БД + миграции

API на фронт для отображения «новых» карточек

Спринт 2

Импорт орг-структуры + RBAC

Автоназначение карточек

UI-привязка: список отдела → карточки

Спринт 3

Статусы + history + LLM-наблюдаемость (UI-таб)

Запись финального статуса в блокчейн

Спринт 4

Worker-агенты для автоматической обработки

Объединённый дашборд (History/Observability)

Удаление модуля «Переводчик»

Такое поэтапное внедрение позволит добавить все описанные в карандаше требования, сохраняя порядок, прозрачность и масштабируемость системы.